<?php
/**
 * Created by PhpStorm.
 * User: luckeri20
 * Date: 20.09.2017
 * Time: 21:47
 */

namespace app\modules\parser\models;
use yii;

class melbet extends ParsingAbstractClass
{
    public $url;
    private $connections;
    /**
     * leonbets constructor
     */
    public function __construct() {
        parent::__construct(5);
        $this->connections = count($this->headers);
    }
    /**
     * leonbets destructor
     */
    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
    /**
     *
     */
    public function getLeages()
    {
        $url[] = [
            'href' => $this->base.'LineFeed/Web_GetSports?lng=ru&champs=0&partner=8&tf=1000000&cyberFlag=2'
        ];
        $channels = $this->proceedUrls($url);
        foreach ($channels as $key => $channel) {
            $html = curl_multi_getcontent($channel);
            if ($html) {
                $json = json_decode(gzdecode($html));
                foreach ($json->Value[1]->Champs as $value) {
                    $parsingUrl = $this->base."/LineFeed/Get1x2?partner=8&count=50&lng=ru&sportId=0&cfview=0&tf=1000000&champid={$value->LigaId}&cyberFlag=2";
                    $this->insertLeage($value->Liga, $this->bukid, $parsingUrl);
                }
            }

        }
    }

    public function getMatches()
    {
        $leages = Yii::$app->db
            ->createCommand('
                SELECT 
                 id,
                 parsing_url as href,
                 `name` as text
                FROM `leages` 
                WHERE `bukid` = :bukid
                AND parsing_url IS NOT NULL', [
                ':bukid' => $this->bukid
            ])->queryAll();
        $u = 0;
        for ($i=0; $i<count($leages); $i=$i+$this->connections) {
            $tmpLeages = [];
            for ($j = 0; $j < $this->connections && $j + $i < count($leages); $j++) {
                $tmpLeages[] = $leages[$j + $i];
            }
            $channels = $this->proceedUrls($tmpLeages);
            foreach ($channels as $key => $channel) {
                $html = curl_multi_getcontent($channel);
                echo 'befor = '.$u; echo '<br>';
                if ($html) {
                    echo 'after = '.$u; echo '<br>';
                    ob_flush();
                    flush();
                    $json = json_decode(gzdecode($html));
                    foreach($json->Value as $val) {
                        $idTeams = $this->insertTeam([$val->Opp1, $val->Opp2]);
                        $melbetUrl = $this->base.'/line/football/'.$this->createUrl($val->ChampEng, $val->Opp1Eng, $val->Opp2Eng, $val->LigaId, $val->ConstId);
                        $parsingUrl = $this->base."/LineFeed/GetGame?id={$val->MainGameId}&partner=8";
                        $this->insertMatch($idTeams, $leages[$key+$i]['id'], date("Y-m-d H:i:s", $val->Start),
                            $this->bukid, $melbetUrl, $parsingUrl);
                    }
                }
            }
        }
    }

    public function getEvents()
    {
        $matches = Yii::$app->db
            ->createCommand('
                SELECT 
                 id,
                 parsing_url as href
                FROM `matches` 
                WHERE `bukid` = :bukid
                AND url IS NOT NULL
                AND `date` > NOW()', [
                ':bukid' => $this->bukid
            ])->queryAll();
        for ($i=0; $i<count($matches); $i=$i+$this->connections) {
            $tmpMatches = [];
            for ($j = 0; $j < $this->connections && $j + $i < count($matches); $j++) {
                $tmpMatches[] = $matches[$j + $i];
            }
            // channels
            $channels = $this->proceedUrls($tmpMatches);
            foreach ($channels as $key => $channel) {
                $html = curl_multi_getcontent($channel);
                if (!empty($html)) {
                    $json = json_decode(gzdecode($html));
                    if (isset($json->Value->Events)) {
                        foreach ($json->Value->Events as $val) {
                            switch ($val->T) {
                                case 1:
                                    $this->insertEvents($matches[$key + $i]['id'], null, 39, $val->C, $this->bukid);
                                    break;
                                case 2:
                                    $this->insertEvents($matches[$key + $i]['id'], null, 40, $val->C, $this->bukid);
                                    break;
                                case 3:
                                    $this->insertEvents($matches[$key + $i]['id'], null, 41, $val->C, $this->bukid);
                                    break;

                                case 4:
                                    $this->insertEvents($matches[$key + $i]['id'], null, 42, $val->C, $this->bukid);
                                    break;
                                case 5:
                                    $this->insertEvents($matches[$key + $i]['id'], null, 44, $val->C, $this->bukid);
                                    break;
                                case 6:
                                    $this->insertEvents($matches[$key + $i]['id'], null, 43, $val->C, $this->bukid);
                                    break;

                                case 9:
                                    $this->insertEvents($matches[$key + $i]['id'], $val->P, 45, $val->C, $this->bukid);
                                    break;
                                case 10:
                                    $this->insertEvents($matches[$key + $i]['id'], $val->P, 46, $val->C, $this->bukid);
                                    break;
                            }
                        }
                    }
                }
                curl_multi_remove_handle($this->mh, $channel);
                curl_close($channel);
                // ждем 0.1 секунд
                usleep(100000);
            }

        }
    }
    /**
     * @param $leage
     * @param $team1
     * @param $team2
     * @param $LI
     * @param $CI
     * @return string
     */
    public function createUrl($leage, $team1, $team2, $LI, $CI)
    {
        $leage = str_replace('.','', $leage);
        $team1 = str_replace('.','', $team1);
        $team2 = str_replace('.','', $team2);
        $leage = str_replace('(','', $leage);
        $team1 = str_replace('(','', $team1);
        $team2 = str_replace('(','', $team2);
        $leage = str_replace(')','', $leage);
        $team1 = str_replace(')','', $team1);
        $team2 = str_replace(')','', $team2);
        $leage = str_replace('\'','', $leage);
        $team1 = str_replace('\'','', $team1);
        $team2 = str_replace('\'','', $team2);

        $url = $LI.'-';
        for ($i=0; $i<strlen($leage); $i++) {
            if ($leage[$i]!=' ') {
                $url = $url.$leage[$i];
            } else {
                $url = $url.'-';
            }
        }
        $url = $url.'/'.$CI.'-';
        for ($i=0; $i<strlen($team1); $i++) {
            if ($team1[$i]!=' ') {
                $url = $url.$team1[$i];
            } else {
                $url = $url.'-';
            }
        }
        $url = $url.'-';
        for ($i=0; $i<strlen($team2); $i++) {
            if ($team2[$i]!=' ') {
                $url = $url.$team2[$i];
            } else {
                $url = $url.'-';
            }
        }
        return $url.'/';
    }
}