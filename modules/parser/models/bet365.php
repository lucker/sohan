<?php
namespace app\modules\parser\models;
use yii;
class bet365 extends ParsingAbstractClass
{
    public $proxyauth;
    public $url;
    private $connections;
    /**
     * xbet constructor.
     */
    public function __construct()
    {
        parent::__construct(6);
        //$this->url = 'https://1xbetua.com/line/Football/';
        //$this->connections = count($this->headers);
        $this->connections  = 1;
    }
    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
    /*
     *
     */
    public function getEvents()
    {
        $matches = $this->getData("
            SELECT 
                id,
                parsing_url as href
            FROM `matches` 
            WHERE `bukid` = {$this->bukid}
            AND url IS NOT NULL
            AND `date` > NOW()
        ");
        $j = 0;
        for ($i=0; $i<count($matches); $i=$i+$this->connections) {
            $tmpMatches = [];
            for ($j = 0; $j < $this->connections && $j + $i < count($matches); $j++) {
                $tmpMatches[] = $matches[$j + $i];
            }
            $channels = $this->proceedUrls($tmpMatches);
            foreach ($channels as $key => $channel) {
                $html = curl_multi_getcontent($channel);
                $json = $this->decode(gzdecode($html));
                if ($html) {
                    $fullTime = false;
                    $doubleChange = false;
                    foreach ($json as $keyValue => $value) {
                        switch ($value['NA']) {
                            case 'Full Time Result':
                                $od = $this->fractionToDecimal($json[$keyValue + 2]['OD']);
                                $this->insertEvents($matches[$key + $i]['id'], null, 1101, $od, $this->bukid);
                                $od = $this->fractionToDecimal($json[$keyValue + 3]['OD']);
                                $this->insertEvents($matches[$key + $i]['id'], null, 1102, $od, $this->bukid);
                                $od = $this->fractionToDecimal($json[$keyValue + 4]['OD']);
                                $this->insertEvents($matches[$key + $i]['id'], null, 1103, $od, $this->bukid);
                                break;
                            case 'Double Chance':
                                $od = $this->fractionToDecimal($json[$keyValue + 2]['OD']);
                                $this->insertEvents($matches[$key + $i]['id'], null, 1108, $od, $this->bukid);
                                $od = $this->fractionToDecimal($json[$keyValue + 3]['OD']);
                                $this->insertEvents($matches[$key + $i]['id'], null, 1109, $od, $this->bukid);
                                $od = $this->fractionToDecimal($json[$keyValue + 4]['OD']);
                                $this->insertEvents($matches[$key + $i]['id'], null, 1110, $od, $this->bukid);
                                break;
                        }
                        if ($fullTime && $doubleChange) {
                            break;
                        }
                    }
                }
                curl_multi_remove_handle($this->mh, $channel);
                curl_close($channel);
                // ждем 0.1 секунд
                usleep(100000);
            }
        }
    }
    /*
     *
     */
    public function getMatches()
    {
        $leages = Yii::$app->db
            ->createCommand('
                SELECT 
                 id,
                 parsing_url as href,
                 `name` as text
                FROM `leages` 
                WHERE `bukid` = :bukid
                AND parsing_url IS NOT NULL', [
                ':bukid' => $this->bukid
            ])->queryAll();
        for ($i=0; $i<count($leages); $i=$i+$this->connections) {
            $tmpLeages = [];
            for ($j=0; $j<$this->connections && $j+$i<count($leages); $j++) {
                $tmpLeages[] = $leages[$j+$i];
            }
            $channels = $this->proceedUrls($tmpLeages);
            foreach ($channels as $key => $channel) {
                $html = curl_multi_getcontent($channel);
                if ($html) {
                    $json = $this->decode(gzdecode($html));
                    foreach($json as $value) {
                            $date = $this->getMysqlDate($value['BC']);
                            $date = new \DateTime($date);
                            $date->add(new \DateInterval('PT2H'));
                            $date = date_format($date, 'Y-m-d H:i:s');
                            $teams = $this->getTeams($value['NA']);
                            if (isset($teams[1])&&$date!=null) {
                                $idTeams = $this->insertTeam($teams);
                                $eventHref = null;
                                $parsingUrl = 'https://www.bet365.com/SportsBook.API/web?lid=1&zid=9&pd='.urlencode($value['PD']).'&cid=195&cgid=1';
                                $this->insertMatch($idTeams, $leages[$key+$i]['id'], $date, $this->bukid, $eventHref, $parsingUrl);
                            }
                    }
                }
                curl_multi_remove_handle($this->mh, $channel);
                curl_close($channel);
            }
        }
    }
    /*
     *
     */
    public function getLeages()
    {
        $urls = [];
        $url[] = [
            'href' => 'https://www.bet365.com/SportsBook.API/web?lid=1&zid=9&pd=%23AS%23B1%23&cid=195&cgid=1'
        ];
        $channels = $this->proceedUrls($url);
        foreach ($channels as $key => $channel) {
            $html = curl_multi_getcontent($channel);
            if ($html) {
                $json = $this->decode(gzdecode($html));
                foreach ($json as $value) {
                    if ($value['CN']==1&&$value['XB']==1) {
                        $parsingUrl = 'https://www.bet365.com/SportsBook.API/web?lid=1&zid=9&pd='.urlencode($value['PD']).'&cid=195&cgid=1';
                        $this->insertLeage($value['NA'], $this->bukid, $parsingUrl);
                    }
                }
            }
            curl_multi_remove_handle($this->mh, $channel);
            curl_close($channel);
        }
    }
    /*
     *
     */
    public function decode($html)
    {
        $arrays = explode('|', $html);
        $res = [];
        foreach ($arrays as $key2 => $array2) {
            $res[] = [];
            $newArray = explode(';', $array2);
            foreach ($newArray as $key3 => $array3) {
                $newArray2 = explode('=', $array3);
                if (isset($newArray2[1])) {
                    $res[count($res)-1][$newArray2[0]] = $newArray2[1];
                } else {
                    $res[count($res)-1][$newArray2[0]] = null;
                }
            }
        }
        return $res;
    }
    /*
     *
     */
    //getTeams
    public function getTeams($teams)
    {
        $teamsArray = [];
        if (strpos($teams,' - ') !== false) {
            $teamsArray = explode(' - ', $teams);
            for ($i = 0; $i < count($teamsArray); $i++) {
                $teamsArray[$i] = trim($teamsArray[$i]);
            }
        } elseif(strpos($teams,' v ') !== false) {
            $teamsArray = explode(' v ', $teams);
            for ($i = 0; $i < count($teamsArray); $i++) {
                $teamsArray[$i] = trim($teamsArray[$i]);
            }
        } elseif(strpos($teams,' vs ') !== true) {
            $teamsArray = explode(' vs ', $teams);
            for ($i = 0; $i < count($teamsArray); $i++) {
                $teamsArray[$i] = trim($teamsArray[$i]);
            }
        }
        return $teamsArray;
    }
    /*
     *
     */
    public function getMysqlDate($date)
    {
        $pattern = '/^([0-9]{1,4})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})([0-9]{1,2})/';
        preg_match($pattern, $date, $matches);
        if (isset($matches[1])) {
            return $matches[1] . '-' . $matches[2] . '-' . $matches[3] . ' ' . $matches[4] . ':' . $matches[5];
        } else {
            return null;
        }
    }
    /*
     *
     */
    public function fractionToDecimal($string)
    {
        $a = '';
        $b = '';
        for ($i=0; $i<strlen($string); $i++) {
            if ($string[$i]=='/') {
                $b = $a;
                $a = '';
                continue;
            }
            $a = $a.$string[$i];
        }
        return round(1 + $b/$a, 2);
    }
}