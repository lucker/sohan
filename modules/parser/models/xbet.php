<?php
/**
 * Created by PhpStorm.
 * User: Manager
 * Date: 22.08.2017
 * Time: 15:54
 */

namespace app\modules\parser\models;
use yii;

class xbet extends ParsingAbstractClass
{
    public $proxyauth;
    public $url;
    private $connections;
    /**
     * xbet constructor.
     */
    public function __construct()
    {
        parent::__construct(1);
        $this->url = 'https://1xbetua.com/line/Football/';
        $this->connections = 20;
    }
    /**
     * xbet destructor
     */
    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    /**
     * events
     */
    public function getEvents()
    {
            $matches = $this->getData("
            SELECT 
                id,
                parsing_url as href
            FROM `matches` 
            WHERE `bukid` = {$this->bukid}
            AND url IS NOT NULL
            AND `date` > NOW()
        ");
            for ($i = 0; $i < count($matches); $i = $i + $this->connections) {
                $tmpMatches = [];
                for ($j = 0; $j < $this->connections && $j + $i < count($matches); $j++) {
                    $tmpMatches[] = $matches[$j + $i];
                }
                $channels = $this->proceedUrls($tmpMatches);
                foreach ($channels as $key => $channel) {
                    $html = curl_multi_getcontent($channel);
                    $info = curl_getinfo($channel);
                    if ($html && $info['http_code'] == 200) {
                        $json = json_decode(gzdecode($html));
                        if (isset($json->Value->O1) && isset($json->Value->O2)) {
                            for ($j = 0; $j < count($json->Value->E); $j++) {
                                //уменшаем время работы цикла
                                if ($json->Value->E[$j]->T > 10) {
                                    break;
                                }
                                switch ($json->Value->E[$j]->T) {
                                    case 1:
                                        $this->insertEvents($matches[$key + $i]['id'], null, 9, $json->Value->E[$j]->C, 1);
                                        break;
                                    case 2:
                                        $this->insertEvents($matches[$key + $i]['id'], null, 10, $json->Value->E[$j]->C, 1);
                                        break;
                                    case 3:
                                        $this->insertEvents($matches[$key + $i]['id'], null, 11, $json->Value->E[$j]->C, 1);
                                        break;

                                    case 4:
                                        $this->insertEvents($matches[$key + $i]['id'], null, 12, $json->Value->E[$j]->C, 1);
                                        break;
                                    case 5:
                                        $this->insertEvents($matches[$key + $i]['id'], null, 14, $json->Value->E[$j]->C, 1);
                                        break;
                                    case 6:
                                        $this->insertEvents($matches[$key + $i]['id'], null, 13, $json->Value->E[$j]->C, 1);
                                        break;

                                    case 9:
                                        $this->insertEvents($matches[$key + $i]['id'], $json->Value->E[$j]->P, 15, $json->Value->E[$j]->C, 1);
                                        break;
                                    case 10:
                                        $this->insertEvents($matches[$key + $i]['id'], $json->Value->E[$j]->P, 16, $json->Value->E[$j]->C, 1);
                                        break;
                                }
                            }
                        }
                    }
                    curl_multi_remove_handle($this->mh, $channel);
                    curl_close($channel);
                    // ждем 0.1 секунд
                    usleep(100000);
                }
            }
    }
    /**
     * @return array матчи
     */
    public function getMatches()
    {
        $leages = Yii::$app->db
            ->createCommand('
                SELECT 
                 id,
                 parsing_url as href,
                 `name` as text
                FROM `leages` 
                WHERE `bukid` = :bukid
                AND parsing_url IS NOT NULL', [
                ':bukid' => $this->bukid
            ])->queryAll();
        for ($i=0; $i<count($leages); $i=$i+$this->connections) {
            $tmpLeages = [];
            for ($j=0; $j<$this->connections && $j+$i<count($leages); $j++) {
                $tmpLeages[] = $leages[$j+$i];
            }
            $channels = $this->proceedUrls($tmpLeages);
            foreach ($channels as $key => $channel) {
                $html = curl_multi_getcontent($channel);
                if (!empty($html)) {
                    $json = json_decode(gzdecode($html));
                    if (isset($json->Value)) {
                        foreach ($json->Value as $val) {
                            if (isset($val->O1) && isset($val->O2)) {
                                $idTeams = $this->insertTeam([$val->O1, $val->O2]);
                                $xbetUrl = $this->url.$this->createUrl($val->LE, $val->O1E, $val->O2E, $val->LI, $val->CI);
                                $this->insertMatch($idTeams, $leages[$key+$i]['id'], date("Y-m-d H:i:s", $val->S),
                                    1, $xbetUrl, "https://1xbetua.com/LineFeed/GetGameZip?id={$val->CI}&lng=ru&cfview=0&isSubGames=true&GroupEvents=true&countevents=20");
                            }
                        }
                    }
                }
                curl_multi_remove_handle($this->mh, $channel);
                curl_close($channel);
            }
        }
    }
    /**
     * @return array all leages
     */
    public function getLeages()
    {
        $urls = [];
        $url[] = [
            'href' => 'https://1xbetua.com/LineFeed/GetChampsZip?sport=1&tf=1000000&tz=3&country=1'
        ];
        $channels = $this->proceedUrls($url);
        foreach ($channels as $key => $channel) {
            $html = curl_multi_getcontent($channel);
            if ($html) {
                $json = json_decode(gzdecode($html));
                if (isset($json->Value)) {
                    foreach ($json->Value as $val) {
                        if (isset($val->LE)) {
                            $this->insertLeage($val->LE, 1,
                                "https://1xbetua.com/LineFeed/Get1x2_Zip?champs={$val->LI}&sports=1&count=50&tf=1000000&tz=3&mode=4&country=2");
                        }
                    }
                }
            }
            curl_multi_remove_handle($this->mh, $channel);
            curl_close($channel);
        }
        return $urls;
    }
    public function createUrl($leage, $team1, $team2, $LI, $CI)
    {
        $leage = str_replace('.','', $leage);
        $team1 = str_replace('.','', $team1);
        $team2 = str_replace('.','', $team2);
        $leage = str_replace('(','', $leage);
        $team1 = str_replace('(','', $team1);
        $team2 = str_replace('(','', $team2);
        $leage = str_replace(')','', $leage);
        $team1 = str_replace(')','', $team1);
        $team2 = str_replace(')','', $team2);
        $leage = str_replace('\'','', $leage);
        $team1 = str_replace('\'','', $team1);
        $team2 = str_replace('\'','', $team2);

        $url = $LI.'-';
        for ($i=0; $i<strlen($leage); $i++) {
            if ($leage[$i]!=' ') {
                $url = $url.$leage[$i];
            } else {
                $url = $url.'-';
            }
        }
        $url = $url.'/'.$CI.'-';
        for ($i=0; $i<strlen($team1); $i++) {
            if ($team1[$i]!=' ') {
                $url = $url.$team1[$i];
            } else {
                $url = $url.'-';
            }
        }
        $url = $url.'-';
        for ($i=0; $i<strlen($team2); $i++) {
            if ($team2[$i]!=' ') {
                $url = $url.$team2[$i];
            } else {
                $url = $url.'-';
            }
        }
        return $url.'/';
    }
}